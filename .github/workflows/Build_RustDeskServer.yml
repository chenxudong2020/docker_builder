name: Build_RustDeskServer

on:
  schedule:
    - cron: '0 18 * * *'
  workflow_dispatch:
    inputs:
      clean_cache:
        description: 'Clear caches'
        required: false
        type: boolean
env:
  CARGO_TERM_COLOR: always
  LATEST_TAG: latest
jobs:
  deploy:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   target: "x86_64-unknown-linux-musl" }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.70.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: ${{ matrix.job.target }}
  
      - name: Build
        run:
          git clone https://github.com/rustdesk/rustdesk-server.git ./build_rustdesk
          cd ./build_rustdesk
          cargo build --release --all-features --target=${{ matrix.job.target }}
          cd ..
          \cp -f ./build_rustdesk/target/release/hbbr ./rustdesk/hbbr
          \cp -f ./build_rustdesk/target/release/hbbs ./rustdesk/hbbs
          \cp -f ./build_rustdesk/target/release/rustdesk-utils ./rustdesk/rustdesk-utils

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1
          
      - name: Login to aliyuncs
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.HUB_NAME }}
          password: ${{ secrets.HUB_PASS }}

      # Runs a single command using the runners shell
      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          file: 'Build_RustDeskServer'
          platforms: linux/amd64
          context: ./
          push: true
          tags: |
            registry.cn-hangzhou.aliyuncs.com/dubux/rustdeskserver:latest
